#! /usr/bin/env ruby

$LOAD_PATH << File.expand_path("../../lib", __FILE__)

require "clamp"
require "docker"
require "docker_image_map/image_set"
require "term/ansicolor"

Excon.defaults[:ssl_verify_peer] = false

C = Term::ANSIColor

Clamp do

  option ["-C", "--compact"], :flag, "compact output"

  def execute
    load_images
    image_set.roots.each do |root|
      display_image(root)
    end
  end

  private

  def image_set
    @image_set ||= DockerImageMap::ImageSet.new
  end

  def load_images
    Docker::Image.all(:all => true).each do |image|
      info = image_set[image.id]
      parent_id = image.info.fetch('ParentId')
      parent_id = nil if parent_id == ""
      if parent_id
        parent = image_set[parent_id]
        info.parent = parent
        parent.children << info
      end
      info.date = Time.at(image.info["Created"])
      info.size = (image.info["VirtualSize"].to_f / 1024 / 1024).round(1)
      image.info.fetch('RepoTags').each do |tag|
        info.tags << tag unless tag == '<none>:<none>'
      end
    end
  end

  def display_image(image, prefix = "", collapsed = 0)
    if compact? && image.children.size == 1 && image.tags.empty?
      display_image(image.children.first, prefix, collapsed + 1)
    else
      puts (prefix + image_line(image, collapsed))
      prefix = prefix + "  " + (" " * collapsed)
      image.tags.to_a.sort.each do |tag|
        puts (prefix + tag_line(tag))
      end
      image.children.each do |child|
        display_image(child, prefix)
      end
    end
  end

  def image_line(image, collapsed)
    "".tap do |s|
      if collapsed > 0
        s << ("." * collapsed)
      end
      s << image.id[0..11]
      s << " "
      s << C.cyan
      s << "("
      s << image.date.strftime("%F")
      s << ", "
      s << image.size.to_s
      s << ")"
      s << C.reset
    end
  end

  def tag_line(tag)
    "#{C.yellow}- #{tag.inspect}#{C.reset}"
  end

end

